# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: portfolio-image

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions: 'write-all'

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # - name: Build development image
      #   run: docker build -f Dockerfile -t ${{ env.IMAGE_NAME }} .

      # - name: List Images
      #   run: docker images

      # - name: Run development container and build the package
      #   run: docker run --name portfoliodev portfolio-image --production
      
      # - name: List Containers
      #   run: docker ps -a

      # - name: Copy built package from container to host
      #   run: docker cp porfoliodev:/app/.next ./dist

      - name: Get short SHA
        id: short-sha
        run: echo "::set-output name=sha::$(echo ${GITHUB_SHA::8})"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      
      - name: Build and push Docker image with built package
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            ghcr.io/${{ github.actor }}/portfolio-dev
            ghcr.io/${{ github.actor }}/${{ github.ref == 'refs/heads/master' && 'latest' || steps.short-sha.outputs.sha }}
            ghcr.io/${{ github.actor }}/${{ startsWith(github.ref, 'refs/tags/') && steps.get_version.outputs.VERSION || steps.short-sha.outputs.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          outputs: type=oci,dest=/tmp/image.tar

      - name: Import image in containerd
        run: |
          sudo ctr i import --base-name ghcr.io/${{ github.actor }}/portfolio-dev --digests --all-platforms /tmp/image.tar
      - name: Push image with containerd
        run: |
          sudo ctr --debug i push --user "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" ghcr.io/${{ github.actor }}/portfolio-dev:latest

  # Deployment job
  # deploy:
  #   # environment:
  #   #   name: github-pages
  #   #   url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v3
  #       with:
  #         artifact_name: github-pages
      
  #     - name: Logging
  #       run: |
  #         echo "Output URL: ${{ steps.deployment.outputs.page_url }}"
